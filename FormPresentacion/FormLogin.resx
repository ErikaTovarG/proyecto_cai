<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="ptureLogo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        velSTCEY++0AAAAASUVORK5CYII=
</value>
  </data>
</root>