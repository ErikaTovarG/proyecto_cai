<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>